#!/usr/bin/env python3
# -*- coding:utf-8 -*-
# Author: davie
"""
高级语言-解释型
解释类：
	执行方式类似于我们日常生活中的"同声翻译"，应用程序源代码一边由相应语言的
解释器"翻译"成目标代码("机器语言")，一边执行，因此效率比较低，而且不能生成
可独立执行的可执行文件，应用程序不能脱离其解释器(想运行，必须先装上解释器，
就像跟老外说话，必须有翻译在场)，但是这种方式比较灵活，可以动态地调整、修改
运用程序。如Python、Java、PHP、Ruby等语言。
执行代码(step1)-->源代码文件-->执行-->解释器/虚拟机-->动态编译(step2)-->机器语言可执行的指令-->cpu

编译型：
1、把源代码编译成机器语言的可执行程序
2、执行可执行程序文件
优点：
1、程序执行时，不在需要源代码，不依赖语言环境，因为执行的是机器码文件
2、执行速度快，因为你的程序代码已经翻译成了计算机可以直接理解的机器语言。
缺点：
1、每次修改了源代码，需要重新编译，生成机器码文件
2、跨平台性不好，不同操作系统，调用底层的机器指令不同，需为
不同平台生成不同机器码文件。
#############################
解释型：
1、用户调用解释器，执行源代码文件
2、解释器把源代码文件边解释成机器指令，边交给cpu执行
优点：
1、天生跨平台，因为解释器已经做好了对不同平台的交互处理，用户写的源代码不需要
再考虑平台差异性，可谓，一份源代码，所有平台都可以直接执行
2、随时修改、立刻见效，改完源代码后，直接运行看效果
缺点：
1、运行效率低，所有的代码均需要经过解释器边解释边执行，速度比编译型慢很多
2、代码是明文

小结：
机器语言：优点是最底层，速度很快，缺点是最复杂，开发效率最低
汇编语言：优点是比较底层，速度最快，缺点是复杂，开发效率最低
高级语言：
1、编译型语言执行速度快，不依赖语言环境运行，跨平台差
2、解释型跨平台好，一份代码，到处使用，缺点是执行速度慢，依赖解释器运行

"""
